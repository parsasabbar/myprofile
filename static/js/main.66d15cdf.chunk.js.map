{"version":3,"sources":["AppRoute.tsx","components/layouts/EmptyLayout.tsx","components/pages/home/IndexPage.tsx","components/pages/home/Page1Page.tsx","RouteManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","memo","Layout","layout","Component","component","rest","render","props","EmptyLayout","document","getElementsByTagName","className","children","IndexPage","Page1Page","path","App","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAoBeA,UAAMC,MAhBrB,YAAsE,IAA1CC,EAAyC,EAAjDC,OAA2BC,EAAsB,EAAjCC,UAAyBC,EAAQ,sCAEnE,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GACN,OACI,kBAACN,EAAD,KACE,kBAACE,EAAcI,WCDdC,MATf,SAAqBD,GAEjB,OADAE,SAASC,qBAAqB,QAAQ,GAAGC,UAAY,cAEjD,6BACKJ,EAAMK,WCIJC,MARf,WACI,OACI,6BACI,6CCKGC,MARf,WACI,OACI,6BACI,gDCmBGf,UAAMC,MATrB,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAUe,KAAK,IAAKb,OAAQM,EAAaJ,UAAWS,IACpD,kBAAC,EAAD,CAAUE,KAAK,SAAUb,OAAQM,EAAaJ,UAAWU,QCTtDE,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAAShB,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFG,SAASc,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66d15cdf.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Route, useHistory } from 'react-router';\r\nimport EmptyLayout from './components/layouts/EmptyLayout';\r\n\r\nfunction AppRoute({ layout: Layout, component: Component, ...rest }) {\r\n  \r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        return (         \r\n            <Layout>\r\n              <Component {...props} />\r\n            </Layout>         \r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default React.memo(AppRoute)\r\n","import React from 'react'\r\n\r\nfunction EmptyLayout(props) {    \r\n    document.getElementsByTagName('html')[0].className = \"emptyLayout\";\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptyLayout\r\n","import React from 'react'\r\n\r\nfunction IndexPage() {\r\n    return (\r\n        <div>\r\n            <h1>hello world</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexPage\r\n","import React from 'react'\r\n\r\nfunction Page1Page() {\r\n    return (\r\n        <div>\r\n            <h2>this is page 1</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page1Page\r\n","import React from 'react'\r\nimport { Switch, Redirect } from 'react-router'\r\nimport AppRoute from './AppRoute'\r\n\r\n\r\n\r\n//Layouts\r\nimport EmptyLayout from './components/layouts/EmptyLayout';\r\n\r\n\r\n//Pages\r\nimport IndexPage from './components/pages/home/IndexPage';\r\nimport Page1Page from './components/pages/home/Page1Page';\r\n\r\n\r\nfunction RouteManager() {\r\n    return (\r\n        <Switch>\r\n            <AppRoute path=\"/\"  layout={EmptyLayout} component={IndexPage} />\r\n            <AppRoute path=\"/page1\"  layout={EmptyLayout} component={Page1Page} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default React.memo(RouteManager)\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport RouteManager from './RouteManager';\n\nfunction App() {\n  return(\n    <RouteManager />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}